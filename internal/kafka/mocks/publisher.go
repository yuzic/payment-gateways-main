// Code generated by MockGen. DO NOT EDIT.
// Source: publisher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKafkaPublisher is a mock of KafkaPublisher interface.
type MockKafkaPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaPublisherMockRecorder
}

// MockKafkaPublisherMockRecorder is the mock recorder for MockKafkaPublisher.
type MockKafkaPublisherMockRecorder struct {
	mock *MockKafkaPublisher
}

// NewMockKafkaPublisher creates a new mock instance.
func NewMockKafkaPublisher(ctrl *gomock.Controller) *MockKafkaPublisher {
	mock := &MockKafkaPublisher{ctrl: ctrl}
	mock.recorder = &MockKafkaPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaPublisher) EXPECT() *MockKafkaPublisherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaPublisher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaPublisherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaPublisher)(nil).Close))
}

// PublishTransaction mocks base method.
func (m *MockKafkaPublisher) PublishTransaction(ctx context.Context, transactionID string, message []byte, dataFormat string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTransaction", ctx, transactionID, message, dataFormat)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTransaction indicates an expected call of PublishTransaction.
func (mr *MockKafkaPublisherMockRecorder) PublishTransaction(ctx, transactionID, message, dataFormat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTransaction", reflect.TypeOf((*MockKafkaPublisher)(nil).PublishTransaction), ctx, transactionID, message, dataFormat)
}
